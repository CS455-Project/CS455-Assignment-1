@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Whack'Em-All</PageTitle>

@if (isGameStarted)
{
    <div class="game-container">
        <h3>Welcome to Whack'Em-All</h3>

        <div class="info-container">
            <h2>Score: @score</h2>
            <h2>Remaining Time: @currentTime</h2>
        </div>

        <div class="canvas">
            @foreach (var s in Cells)
            {
                <Cell CellModel="s" OnMouseUp="() => MouseUp(s)" />
            }
        </div>

        <audio id="hitSound" src="hitsound.mp3" preload="auto"></audio>
        <audio id="missSound" src="misssound.mp3" preload="auto"></audio>
    </div>
}
else if (showLeaderboard)
{
    <div class="leaderboard-page">
        <h1>Leaderboard</h1>
        <table>
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Name</th>
                    <th>Score</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < leaderboardData.Count; i++)
                {
                    <tr>
                        <td>@(i + 1)</td>
                        <td>@leaderboardData[i].Name</td>
                        <td>@leaderboardData[i].Score</td>
                    </tr>
                }
            </tbody>
        </table>
        <button @onclick="CloseLeaderboard">Back to Menu</button>
    </div>
}
else
{
    <div class="start-menu">
        <h1>Welcome to Whack'Em-All!</h1>
        <div class="Instructions">
            <p> How to play?? </p>
            <ul>
                <li>The game consists of a 4x4 grid. Every second, a smiley will appear in one of the grid cells.</li>
                <li>You need to collect these smileys by clicking on them.</li>
                <li>Each time you collect one, your score will increase by one.</li>
                <li>You have 60 seconds to play. The game will end after that.</li>
            </ul>
            <p>ALL THE BEST!!!</p>
        </div>

        @* <p>Are you ready to start the game?</p> *@
        <div class="Buttons">
        <button @onclick="ShowNamePrompt">Start Game</button>
        <button @onclick="ViewLeaderboard">View Leaderboard</button>
        </div>
    </div>
}

@if (showNamePrompt)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h1>Enter Your Name</h1>
            <input type="text" @bind="playerName" placeholder="Name" />
             @* //<p>Current Player Name: @playerName</p> <!-- Debug line --> *@
            <button @onclick="StartGame">Start Game</button>
            <button @onclick="CancelNamePrompt">Cancel</button>
        </div>
    </div>
}

@if (showGameOverModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            @if (score < 45)
            {
                <h2>Oops ... Game Over!</h2>
                <p>Your final score is: @score</p>
            }
            else
            {
                <h2>You Won!</h2>
                <p>Your final score is: @score</p>
            }
            <button @onclick="RestartGame">Restart Game</button>
            <button @onclick="ReturnToStartMenu">Return to Start Menu</button>
            <button @onclick="ViewLeaderboard">View Leaderboard</button>
        </div>
    </div>
}

@code {
    private Random random = new Random();
    public List<LeaderboardEntry> leaderboardData = new List<LeaderboardEntry>();
    public async Task ViewLeaderboard()
    {
        try
        {   
            showGameOverModal = false;
            isGameStarted = false;
            var response = await Http.GetFromJsonAsync<List<LeaderboardEntry>>("https://cs455-assignment-1.onrender.com/leaderboard");
            Console.WriteLine(response);
            if (response != null)
            {
                leaderboardData = response;
                showLeaderboard = true;
            }
            else
            {
                Console.WriteLine("Failed to fetch leaderboard data.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching leaderboard: {ex.Message}");
        }
    }

    public void CloseLeaderboard()
    {
        showLeaderboard = false;
    }

    public void ShowNamePrompt()
    {
        showNamePrompt = true;
    }

    public void CancelNamePrompt()
    {
        showNamePrompt = false;
        playerName = string.Empty;
    }

    public async Task MouseUp(CellModel s)
    {
        if (isGameRunning)
        {
            if (s.Id == hitPosition)
            {
                score += 1;
                await PlayHitSound();
            }
            else
            {
                await PlayMissSound();
            }
        }
    }

    protected async Task PlayHitSound()
    {
        await JSRuntime.InvokeVoidAsync("playSound1");
    }

    protected async Task PlayMissSound()
    {
        await JSRuntime.InvokeVoidAsync("playSound2");
    }

    public void setNextAppearance()
    {
        foreach (var item in Cells)
        {
            item.IsShown = false;
        }

        int randomPosition;
        do
        {
            randomPosition = random.Next(0, 16);
        } while (lastPosition == randomPosition);

        Cells[randomPosition].IsShown = true;
        hitPosition = randomPosition;
        lastPosition = randomPosition;
    }

    protected virtual async Task GameLoopAsync(PeriodicTimer timer)
    {
        while (isGameRunning)
        {
            setNextAppearance();
            StateHasChanged();
            await timer.WaitForNextTickAsync();
            StateHasChanged();
        }
    }

    protected virtual async Task GameTimeAsync(PeriodicTimer timer)
    {
        while (isGameRunning)
        {
            if (currentTime == 0)
            {
                await EndGame();
                break;
            }
            await timer.WaitForNextTickAsync();
            currentTime--;
            StateHasChanged();
        }
    }

    public void StartGame()
    {
        if (string.IsNullOrWhiteSpace(playerName))
        {
            Console.WriteLine("Please enter a valid name.");
            return;
        }
        showNamePrompt = false;
        isGameStarted = true;
        score = 0;
        currentTime = 60;
        isGameRunning = true;
        showGameOverModal = false;

        gameLoopTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(1000)); 
        _ = GameLoopAsync(gameLoopTimer);

        gameTimeTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        _ = GameTimeAsync(gameTimeTimer);
    }

    public async Task EndGame()
    {
        isGameRunning = false;
        showGameOverModal = true;
        gameLoopTimer?.Dispose();
        gameTimeTimer?.Dispose();
        
        await SendScoreToServer(score); 
    }

    public void RestartGame()
    {
        showGameOverModal = false;
        StartGame();
    }

    public void ReturnToStartMenu()
    {
        showGameOverModal = false;
        isGameStarted = false;
    }

    public virtual async Task SendScoreToServer(int score)
    {
        var response = await Http.PostAsJsonAsync("https://cs455-assignment-1.onrender.com/", new { name = playerName, score });
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Score successfully sent to the server.");
        }
        else
        {
            Console.WriteLine($"Failed to send score. Status Code: {response.StatusCode}");
        }
    }
}