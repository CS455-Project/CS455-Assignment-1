name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  schedule:
    # Run nightly at midnight UTC
    - cron: '0 0 * * *'

jobs:    
  build:
    name: SonarCloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install server test dependencies
        run: |
          cd server
          npm install
          cd ..

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      
      - name: Install dotCover
        run: dotnet tool install --global JetBrains.dotCover.GlobalTool

      - name: Build the solution
        run: dotnet build src/MoleProject.csproj --configuration Debug

      - name: Build the test project
        run: dotnet build TestProject/TestProject.csproj --configuration Debug

      - name: Begin SonarCloud Analysis
        run: .\.sonar\scanner\dotnet-sonarscanner begin /k:"CS455-Project_CS455-Assignment-1" /o:"cs455-project" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.dotcover.reportsPaths=dotCover.Output.html /d:sonar.javascript.lcov.reportPaths=server/coverage/lcov.info /d:sonar.exclusions="**/dotCover.Output/**,dotCover.Output.html"

      - name: Run tests and collect coverage
        run: dotnet dotcover test TestProject/TestProject.csproj --dcReportType=HTML        
        
      - name: Run JavaScript tests and Coverage
        run: |
          cd server
          npm test 
          cd ..

      - name: End SonarCloud Analysis
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Fetch and display detailed SonarCloud analysis results
        if: always()
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Fetching detailed analysis results..."
          curl -u $SONAR_TOKEN: "https://sonarcloud.io/api/issues/search?componentKeys=CS455-Project_CS455-Assignment-1" > sonarcloud-results.json
          echo "Analysis results:"
          cat sonarcloud-results.json | jq '.issues[] | {key, component, severity, message, line}' 

      - name: Upload SonarCloud results artifact
        if: always()  
        uses: actions/upload-artifact@v3
        with:
          name: sonarcloud-results
          path: sonarcloud-results.json 

      - name: Check SonarCloud Quality Gate
        id: quality-gate
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          SONAR_STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=CS455-Project_CS455-Assignment-1" | jq -r '.projectStatus.status')
          if [ "$SONAR_STATUS" != "OK" ]; then
            echo "Quality gate failed: $SONAR_STATUS"
            exit 1  
          else
            echo "Quality gate passed!"
          fi

  deploy-to-github-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write   
    if: success()
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.107

      - name: Publish .NET Core Project
        run: dotnet publish src/MoleProject.csproj -c Release -o release --nologo
      
      - name: Verify index.html exists
        run: |
          if [ ! -f release/wwwroot/index.html ]; then
            echo "Error: index.html not found!"
            exit 1
          fi

      - name: Change base-tag in index.html
        run: sed -i 's/<base href="\/" \/>/<base href="\/MoleProject\/" \/>/g' release/wwwroot/index.html
      
      - name: Copy index.html to 404.html
        run: cp release/wwwroot/index.html release/wwwroot/404.html

      - name: Add .nojekyll file
        run: touch release/wwwroot/.nojekyll

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: release/wwwroot

  nightly-load-test:
    name: Nightly Load Test 
    runs-on: ubuntu-latest 
    if: github.event_name == 'schedule'  # Check if triggered by schedule
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 
        uses: actions/setup-python@v2 
        with:
          python-version : '3.x'
      
      - name : Install dependencies 
        run : |
           pip install -r perftest/requirements.txt 
           npm install -g artillery
      
      - name : Load Test
        run : python perftest/load_time.py
      
      - name : Run Artillery Load Test
        run : artillery run perftest/load-test.yml --output perftest/load_report.json
      
      - name : Upload Load Test Results
        uses : actions/upload-artifact@v3
        with :
           name : load-test-results 
           path : perftest/load_report.json 
