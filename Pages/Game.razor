 @page "/"

<PageTitle>Whack'Em-All</PageTitle>

@if (isGameStarted)
{
    <div class="game-container">
        <h1>Welcome to Whack'Em-All</h1>

        <div class="info-container">
            <h2>Score: @score</h2>
            <h2>Remaining Time: @currentTime</h2>
            <h2>@msg</h2>
        </div>

        <div class="canvas">
            @foreach (var s in Squares)
            {
                <Square SquareModel="s" OnMouseUp="() => MouseUp(s)" />
            }
        </div>
    </div>
}
else
{
    <div class="start-menu full-screen">
        <h1>Welcome to Whack'Em-All!</h1>
        <p>Are you ready to start the game?</p>
        <button @onclick="StartGame">Start Game</button>
    </div>
}

@if (showGameOverModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2>Game Over</h2>
            <p>Your final score is: @score</p>
            <button @onclick="RestartGame">Restart Game</button>
            <button @onclick="ReturnToStartMenu">Return to Start Menu</button>
        </div>
    </div>
}

@code {
    private PeriodicTimer gameLoopTimer;
    private PeriodicTimer gameTimeTimer;
    private bool showGameOverModal = false;
    private bool isGameStarted = false;
    private Random random = new Random();
    private int? lastPosition = null;

    private void MouseUp(SquareModel s)
    {
        if (isGameRunning)
        {
            if (s.Id == hitPosition)
            {
                score += 1;
            }
        }
    }

    private void setNextAppearance()
    {
        foreach (var item in Squares)
        {
            item.IsShown = false;
        }

        int randomPosition;

        do
        {
            randomPosition = random.Next(0, 16);
        } while (lastPosition == randomPosition);

        Squares[randomPosition].IsShown = true;
        hitPosition = randomPosition;
        lastPosition = randomPosition;

        StateHasChanged();
    }

    private async Task GameLoopAsync(PeriodicTimer timer)
    {
        while (isGameRunning)
        {
            setNextAppearance();
            await timer.WaitForNextTickAsync();
        }
    }

    private async Task GameTimeAsync(PeriodicTimer timer)
    {
        while (isGameRunning)
        {
            currentTime--;

            if (currentTime == 0)
            {
                msg = "Game Over";
                isGameRunning = false;
                showGameOverModal = true;
            }
            StateHasChanged();
            await timer.WaitForNextTickAsync();
        }
    }

    private void StartGame()
    {
        isGameStarted = true;
        score = 0;
        currentTime = 60; // Reset time
        isGameRunning = true;
        msg = "";
        showGameOverModal = false;

        gameLoopTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(gameSpeed));
        _ = GameLoopAsync(gameLoopTimer);

        gameTimeTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        _ = GameTimeAsync(gameTimeTimer);
    }

    private void RestartGame()
    {
        showGameOverModal = false;
        StartGame();
    }

    private void ReturnToStartMenu()
    {
        showGameOverModal = false;
        isGameStarted = false;
    }
}
